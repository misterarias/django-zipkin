#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from zipkinQuery import ZipkinQuery
from zipkinQuery.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  QueryResponse getTraceIds(QueryRequest request)'
  print '   getTraceIdsBySpanName(string service_name, string span_name, i64 end_ts, i32 limit, Order order)'
  print '   getTraceIdsByServiceName(string service_name, i64 end_ts, i32 limit, Order order)'
  print '   getTraceIdsByAnnotation(string service_name, string annotation, string value, i64 end_ts, i32 limit, Order order)'
  print '   tracesExist( trace_ids)'
  print '   getTracesByIds( trace_ids,  adjust)'
  print '   getTraceTimelinesByIds( trace_ids,  adjust)'
  print '   getTraceSummariesByIds( trace_ids,  adjust)'
  print '   getTraceCombosByIds( trace_ids,  adjust)'
  print '   getServiceNames()'
  print '   getSpanNames(string service_name)'
  print '  void setTraceTimeToLive(i64 trace_id, i32 ttl_seconds)'
  print '  i32 getTraceTimeToLive(i64 trace_id)'
  print '  i32 getDataTimeToLive()'
  print '  Dependencies getDependencies(i64 start_time, i64 end_time)'
  print '   getTopAnnotations(string service_name)'
  print '   getTopKeyValueAnnotations(string service_name)'
  print '   getSpanDurations(i64 time_stamp, string service_name, string rpc_name)'
  print '   getServiceNamesToTraceIds(i64 time_stamp, string service_name, string rpc_name)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ZipkinQuery.Client(protocol)
transport.open()

if cmd == 'getTraceIds':
  if len(args) != 1:
    print 'getTraceIds requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTraceIds(eval(args[0]),))

elif cmd == 'getTraceIdsBySpanName':
  if len(args) != 5:
    print 'getTraceIdsBySpanName requires 5 args'
    sys.exit(1)
  pp.pprint(client.getTraceIdsBySpanName(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'getTraceIdsByServiceName':
  if len(args) != 4:
    print 'getTraceIdsByServiceName requires 4 args'
    sys.exit(1)
  pp.pprint(client.getTraceIdsByServiceName(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'getTraceIdsByAnnotation':
  if len(args) != 6:
    print 'getTraceIdsByAnnotation requires 6 args'
    sys.exit(1)
  pp.pprint(client.getTraceIdsByAnnotation(args[0],args[1],args[2],eval(args[3]),eval(args[4]),eval(args[5]),))

elif cmd == 'tracesExist':
  if len(args) != 1:
    print 'tracesExist requires 1 args'
    sys.exit(1)
  pp.pprint(client.tracesExist(eval(args[0]),))

elif cmd == 'getTracesByIds':
  if len(args) != 2:
    print 'getTracesByIds requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTracesByIds(eval(args[0]),eval(args[1]),))

elif cmd == 'getTraceTimelinesByIds':
  if len(args) != 2:
    print 'getTraceTimelinesByIds requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTraceTimelinesByIds(eval(args[0]),eval(args[1]),))

elif cmd == 'getTraceSummariesByIds':
  if len(args) != 2:
    print 'getTraceSummariesByIds requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTraceSummariesByIds(eval(args[0]),eval(args[1]),))

elif cmd == 'getTraceCombosByIds':
  if len(args) != 2:
    print 'getTraceCombosByIds requires 2 args'
    sys.exit(1)
  pp.pprint(client.getTraceCombosByIds(eval(args[0]),eval(args[1]),))

elif cmd == 'getServiceNames':
  if len(args) != 0:
    print 'getServiceNames requires 0 args'
    sys.exit(1)
  pp.pprint(client.getServiceNames())

elif cmd == 'getSpanNames':
  if len(args) != 1:
    print 'getSpanNames requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSpanNames(args[0],))

elif cmd == 'setTraceTimeToLive':
  if len(args) != 2:
    print 'setTraceTimeToLive requires 2 args'
    sys.exit(1)
  pp.pprint(client.setTraceTimeToLive(eval(args[0]),eval(args[1]),))

elif cmd == 'getTraceTimeToLive':
  if len(args) != 1:
    print 'getTraceTimeToLive requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTraceTimeToLive(eval(args[0]),))

elif cmd == 'getDataTimeToLive':
  if len(args) != 0:
    print 'getDataTimeToLive requires 0 args'
    sys.exit(1)
  pp.pprint(client.getDataTimeToLive())

elif cmd == 'getDependencies':
  if len(args) != 2:
    print 'getDependencies requires 2 args'
    sys.exit(1)
  pp.pprint(client.getDependencies(eval(args[0]),eval(args[1]),))

elif cmd == 'getTopAnnotations':
  if len(args) != 1:
    print 'getTopAnnotations requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTopAnnotations(args[0],))

elif cmd == 'getTopKeyValueAnnotations':
  if len(args) != 1:
    print 'getTopKeyValueAnnotations requires 1 args'
    sys.exit(1)
  pp.pprint(client.getTopKeyValueAnnotations(args[0],))

elif cmd == 'getSpanDurations':
  if len(args) != 3:
    print 'getSpanDurations requires 3 args'
    sys.exit(1)
  pp.pprint(client.getSpanDurations(eval(args[0]),args[1],args[2],))

elif cmd == 'getServiceNamesToTraceIds':
  if len(args) != 3:
    print 'getServiceNamesToTraceIds requires 3 args'
    sys.exit(1)
  pp.pprint(client.getServiceNamesToTraceIds(eval(args[0]),args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
